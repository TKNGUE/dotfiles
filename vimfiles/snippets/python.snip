#my snipets
snippet     list_comprehension
alias       ls_comp
abbr        [ x for x in X]
options     word
        [ ${3:process} for ${2:val} in ${1:iterable}]

snippet    defcls
options     head
    @classmethod
    def ${1:class_method} (cls, ${2:args}):
        ${3:body}

#For pytest snippets
snippet    assert
options     head
        assert ${1:first} == ${2:second}

snippet    asfalse
abbr        assert if it's not false
options     head
        assert ${1:expression} is False

snippet    as>
options     head
        assert ${1:first} > ${2:second}

snippet    as>= 
options     head
        assert ${1:first} >= ${2:second}

snippet    asin
options     head
        assert ${1:member} in ${2:container}

snippet    asis
options     head
        assert ${1:expr1} is ${2:expr2}

snippet    asisnot
options     head
        assert ${1:expr1} is not ${2:expr2}

snippet    as&lt;
options     head
        assert ${1:first} < ${2:second}

snippet    as&lt;=
options     head
        assert ${1:first} <= ${2:second}

snippet    as!=
options     head
        assert ${1:first} != ${2:second}

snippet    as!in
options     head
        assert ${1:member} not in ${2:container}

snippet    asraises
options     head
        with pytest.raises(${1:Exception}):
        ${2:code}

snippet    astrue
options     head
        assert ${1:expression} is True

snippet    fixture
options     head
        @pytest.fixture(scope='${1:function}')
        def ${2:name}(request):
        ${3:body}

snippet    mark
options     head
        @pytest.mark

snippet    parametrize
options     head
        @pytest.mark.parametrize('${1:name}', [${2:parameters}])

options     head
        @pytest.mark.usefixtures('${1:fixture}')

# if __name__ == '__main__':
snippet main
        def ${1:main}():
           ${0:pass}

        if __name__ == '__main__':
           $1:()
