#==================================================
# bind-key の -rオプション
#   repeat-timeミリ秒の間, 2度目以降はprefixを入力せず
#   連続して動作を行える

set-option -g prefix C-q 
set-option -g prefix2 C-s 
# set-option -g prefix2 C-b 
# bind -n C-s send-prefix     #For using Nested tmux sessions. C-t C-t <command> 
unbind-key -n C-a

set -sg escape-time 1               # キーストロークのディレイを減らす 
set -g base-index 1                 # ウィンドウのインデックスを1から始める 
setw -g pane-base-index 1           # ペインのインデックスを1から始める

# 256色端末を使用する
set -g default-terminal "xterm-256color"
set-option -g xterm-keys off

# Key-bindings  {{{
# Reload configuration file
bind r source-file ~/.tmux.conf \; display "Reloaded!"

#vim like split
bind c new-window      

is_tmux='test `tmux -V |sed "s/\.//g"| cut -d" " -f2` -gt 18 '
bind s if "$is_tmux" " \
    split-window -v -c '#{pane_current_path}'" " \
    split-window -v"
# bind S if "$is_tmux" " \
#     split-window -v -c '#{pane_current_path}'  'new-window -n %1 'ssh %1' "\
#     split-window -v new-window -n %1 'ssh %1'"
bind v if-shell "$is_tmux" "\
    split-window -h -c '#{pane_current_path}'" "\
    split-window -h "
# # bind V if-shell "$is_tmux" "\
# #     split-window -h -c '#{pane_current_path}'" "\
#     split-window -h "

bind-key S command-prompt -p "ssh targets>" "bind-key -n C-q send-prefix; split-window -v 'ssh %1'"
bind-key V command-prompt -p "ssh targets>" "bind-key -n C-q send-prefix; split-window -h 'ssh %1'"


# Vimのキーバインドでペインを移動する
# Smart pane switching with awareness of vim splits
is_ssh='echo "#{pane_current_command}" | grep -iqE "ssh" && (( #{window_panes} < 2))'
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?"'
bind -n C-h if-shell "$is_ssh || $is_vim" "send-keys C-h" "select-pane -L" 
bind -n C-j if-shell "$is_ssh || $is_vim" "send-keys C-j" "select-pane -D" 
bind -n C-k if-shell "$is_ssh || $is_vim" "send-keys C-k" "select-pane -U" 
bind -n C-l if-shell "$is_ssh || $is_vim" "send-keys C-l" "select-pane -R" 
bind -n C-\ if-shell "$is_ssh || $is_vim" "send-keys C-\\" "select-pane -l"

bind-key b set-option status
bind-key / command-prompt -p "manual>" "split-window 'exec man %%'"
bind-key C command-prompt -p "ssh targets>" "bind-key -n C-q send-prefix; new-window -n %1 'ssh %1'"
bind-key T split-window 'exec top'
bind-key Q kill-window

# bind C-q send-key C-q     #For using Nested tmux sessions. C-t C-t <command> 
bind n run-shell 'tmux next-window; \
        tmux if-shell "$is_ssh" " \
            unbind-key C-q; bind-key -n C-q send-prefix" "\
            set-option -q prefix C-q; unbind-key -n C-q "'
bind p run-shell 'tmux previous-window; \
        tmux if-shell "$is_ssh" " \
            bind-key -n C-q send-prefix" "\
            set-option -q prefix C-q; unbind-key -n C-q "'

bind -n C-Left  run-shell 'tmux previous-window; \
        tmux if-shell "$is_ssh" " \
            bind-key -n C-q send-prefix" "\
            set-option -q prefix C-q; unbind-key -n C-q "'

bind -n C-Right  run-shell 'tmux next-window; \
        tmux if-shell "$is_ssh" " \
            bind-key -n C-q send-prefix" "\
            set-option -q prefix C-q; unbind-key -n C-q"'

bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

## copy to clipboard
### for Linux
if-shell "which xsel" '\
    bind-key -t vi-copy y copy-pipe "xsel -ib 2>/dev/null"; \
    bind-key -t vi-copy enter copy-pipe "xsel -ib"; \
'

### for Cygwin
if-shell "which putclip" '\
    bind-key -t vi-copy y copy-pipe "iconv -s -t SJIS | putclip"; \
    bind-key -t vi-copy enter copy-pipe "iconv -s -t SJIS | putclip"; \
'

### for OS X
if-shell "which pbcopy" '\
    bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"; \
    bind-key -t vi-copy enter copy-pipe  "reattach-to-user-namespace pbcopy"; \
'

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
#bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
unbind -t vi-copy Enter
#bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

# }}}

setw -g aggressive-resize off

# マウス操作を有効にする
set-option -g mouse off
# setw -g mode-mouse off
# set -g mouse-select-pane off
# set -g mouse-resize-pane off
# set -g mouse-select-window off

## ステータスラインの色を設定する
#set -g status-fg cyan
set -g status-bg colour235

## コマンドラインの色を設定する
set -g message-fg white
set -g message-bg colour235
set -g message-attr bright

##自動リネーム
# setw -g automatic-rename 

## ヴィジュアルノーティフィケーションを有効にする
setw -g monitor-activity on
set -g visual-activity on
## ステータスラインを上部に表示する
set -g status-position top

set-option -g status on
set-option -g status-interval 2
set-option -g status-utf8 on
set-option -g status-justify "centre"
set-option -g status-left-length 90
set-option -g status-right-length 90
set-option -g status-left "#(~/.local/src/tmux-powerline/powerline.sh left)"
set-option -g status-right "#(~/.local/src/tmux-powerline/powerline.sh right)"
set-window-option -g window-status-current-format "#[fg=colour235, bg=colour27]⮀#[fg=colour255, bg=colour27] #I ⮁ #W #[fg=colour27, bg=colour235]⮀"
