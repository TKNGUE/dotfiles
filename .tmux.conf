#==================================================
# bin-key の -rオプション
#   repeat-timeミリ秒の間, 2度目以降はprefixを入力せず
#   連続して動作を行える

set-option -g prefix C-q 
bind -n C-s send-prefix     #For using Nested tmux sessions. C-t C-t <command> 
unbind C-b

set -sg escape-time 1               # キーストロークのディレイを減らす 
set -g base-index 1                 # ウィンドウのインデックスを1から始める 
setw -g pane-base-index 1           # ペインのインデックスを1から始める
set-option -g xterm-keys on


# Key-bindings  {{{
# Reload configuration file
bind r source-file ~/.tmux.conf \; display "Reloaded!"

#vim like split
bind c new-window -c '#{pane_current_path}'
bind s split-window -v -c '#{pane_current_path}'
bind v split-window -h -c '#{pane_current_path}'


# Vimのキーバインドでペインを移動する
# Smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?|ssh)(diff)?$"'
is_ssh='echo "#{pane_current_command}" | grep -iqE "ssh"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

bind-key b set-option status
bind-key / command-prompt -p "manual>" "split-window 'exec man %%'"
bind-key S command-prompt -p "ssh targets>" "new-window -n %1 'ssh %1'"
bind-key T split-window 'exec htop'

bind -n C-q send-key C-q     #For using Nested tmux sessions. C-t C-t <command> 
bind -n C-Left  run-shell 'tmux previous-window; \
        tmux if-shell "$is_ssh" " \
            set-option -q prefix C-s " " \
            set-option -q prefix C-q "'

bind -n C-Right  run-shell 'tmux next-window; \
        tmux if-shell "$is_ssh" " \
            set-option -q prefix C-s" "\
            set-option -q prefix C-q; unbind C-s"'

bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

## copy to clipboard
### for Linux
if-shell "which xsel" '\
    bind-key -t vi-copy y copy-pipe "xsel -ib 2>/dev/null"; \
    bind-key -t vi-copy enter copy-pipe "xsel -ib"; \
'

### for Cygwin
if-shell "which putclip" '\
    bind-key -t vi-copy y copy-pipe "iconv -s -t SJIS | putclip"; \
    bind-key -t vi-copy enter copy-pipe "iconv -s -t SJIS | putclip"; \
'

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
#bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
unbind -t vi-copy Enter
#bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

# }}}

#言語設定
setw -g utf8 on 
set-window-option -g utf8 on 
set -g status-utf8 on


setw -g aggressive-resize on


# マウス操作を有効にする
setw -g mode-mouse on
set -g mouse-select-pane on
set -g mouse-resize-pane on
set -g mouse-select-window on

# 256色端末を使用する
set -g default-terminal "xterm-256color"

# ステータスラインの色を設定する
set -g status-fg cyan
set -g status-bg black

# ウィンドウリストの色を設定する
setw -g window-status-fg white
setw -g window-status-bg black

# アクティブなウィンドウを目立たせる
#setw -g window-status white
setw  -g window-status-current-fg black 
setw -g window-status-current-bg yellow
setw -g window-status-current-attr bright

# ペインボーダーの色を設定する
set -g pane-border-fg green
set -g pane-border-bg default

# アクティブなペインを目立たせる
set -g pane-active-border-fg cyan
set -g pane-active-border-bg cyan

# コマンドラインの色を設定する
set -g message-fg white
set -g message-bg black
set -g message-attr bright

##自動リネーム
setw -g automatic-rename 

## 左パネルを設定する
set -g status-left-length 40
set -g status-left "#[fg=green]Session:#S[#h] #[fg=yellow]#I #[fg=cyan]#P"
## 右パネルを設定する
set -g status-right "#[fg=cyan][%Y-%m-%d(%a) %H:%M]"
## リフレッシュの間隔を設定する(デフォルト 15秒)
set -g status-interval 60
## ウィンドウリストの位置を中心寄せにする
set -g status-justify centre
## ヴィジュアルノーティフィケーションを有効にする
setw -g monitor-activity on
set -g visual-activity on
## ステータスラインを上部に表示する
set -g status-position top

