[include]
    path = .local.gitconfig

[core]
    whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
    excludesfile = .gitignore
    quotepath  = false

    # Use custom `.gitignore` and `.gitattributes`
    excludesfile = ~/.gitignore
    attributesfile = ~/.gitattributes

[color]
    ui = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[push]
    default = simple

[init]
    templatedir = ~/.git_template

[diff]
    tool = vimdiff

[credential] 
    helper = "cache --timeout 1800"

[diff "office"]
    binary = true
    textconv = "tika --text"

[difftool.latex]
    cmd = latexdiff-vc --git "$LOCAL" "$REMOTE" 

[remote]
    pushDefault="origin"

[difftool]
    prompt = false

[alias]
    ignore = !"f() { local s=$1; shift; \
        while [ $# -gt 0 ]; do s=\"$s,$1\"; shift; done;\
        curl \"https://www.gitignore.io/api/$s\"; }; f"
    ldiff = difftool -t latex
    # List contributors with number of commits
    contributors = shortlog --summary --numbered

    tags = tag -l
    branches = branch -a
    remotes = remote -v

    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD

    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    # Merge GitHub pull request on top of the `master` branch
    ##!/bin/sh
    mpr = "!f() { \
            if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
                    git fetch origin refs/pull/$1/head:pr/$1 && \
                    git rebase master pr/$1 && \
                    git checkout master && \
                    git merge pr/$1 && \
                    git branch -D pr/$1 && \
                    git commit --amend -m \"$(git log -1 --pretty=%B)  Closes #$1.\"; \
            fi \
    }; f"

[commit]
    template = ~/.gitmessage
